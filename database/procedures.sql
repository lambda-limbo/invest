--
-- Procedures files
-- 


--
-- @brief Deletes an user given the primary key value
--
DELIMITER //
CREATE  PROCEDURE P_DELETE_USER (IN PK_CODE INT)
BEGIN
    IF EXISTS (SELECT USER_PK FROM TB_USER WHERE USER_PK = PK_CODE)
    THEN
        DELETE FROM TB_USER WHERE USER_PK = PK_CODE;
    END IF;
END
//


--
-- @brief Creates an user on the database
--
DELIMITER //
CREATE  PROCEDURE P_INSERT_ADM(NAME VARCHAR(100), LOGIN VARCHAR(20), PASSWORD VARCHAR(255), CPF VARCHAR(20), EMAIL VARCHAR(50),
							PHONE VARCHAR(20), BIRTH DATE, WALLET DOUBLE)
BEGIN
    INSERT INTO TB_USER (USER_NAME, USER_LOGIN, USER_PASSWORD, USER_CPF, USER_EMAIL, USER_PHONE, USER_BIRTH, USER_WALLET, USER_ADM)
    VALUES (NAME, LOGIN, PASSWORD, CPF, EMAIL, PHONE, BIRTH, WALLET, 0);
END
//

--
-- @brief Creates an user on the database with administrative privileges
--
DELIMITER //
CREATE  PROCEDURE P_INSERT_ADM(NAME VARCHAR(100), LOGIN VARCHAR(20), PASSWORD VARCHAR(255), CPF VARCHAR(20), EMAIL VARCHAR(50),
							PHONE VARCHAR(20), BIRTH DATE, WALLET DOUBLE)
BEGIN
    INSERT INTO TB_USER (USER_NAME, USER_LOGIN, USER_PASSWORD, USER_CPF, USER_EMAIL, USER_PHONE, USER_BIRTH, USER_WALLET, USER_ADM)
    VALUES (NAME, LOGIN, PASSWORD, CPF, EMAIL, PHONE, BIRTH, WALLET, 1);
END
//


--
-- @brief
--
DELIMITER //
CREATE  PROCEDURE P_SELECT_ADM (IN PK_CODE INT)
BEGIN
  SELECT * FROM TB_USER WHERE USER_ADM = PK_CODE;
END
//


-- 
-- @brief
--
DELIMITER //
CREATE  PROCEDURE P_UPDATE_EMAIL(PK_CODE INT, EMAIL VARCHAR(50))
BEGIN
    IF EXISTS (SELECT USER_EMAIL FROM TB_USER WHERE USER_EMAIL = EMAIL AND
               USER_PK = PK_CODE)
    THEN
        UPDATE TB_USER SET USER_EMAIL = EMAIL WHERE USER_PK = PK_CODE;
    END IF;
END
//

--
-- @brief Changes the password of a given user primary key
--
DELIMITER //
CREATE PROCEDURE P_UPDATE_PASS(PK_CODE INT, LOGIN VARCHAR(20), PASSWORD VARCHAR(255),
                               NEW_PASSWORD VARCHAR(255))
BEGIN
    IF EXISTS (SELECT USER_PASSWORD FROM TB_USER WHERE USER_PASSWORD = PASSWORD AND
               USER_LOGIN = LOGIN)
    THEN
        UPDATE TB_USER SET USER_PASSWORD = NEW_PASSWORD WHERE USER_PK = PK_CODE;
    END IF;
END
//

--
-- @brief Changes the phone of a given user primary key
--
DELIMITER //
CREATE PROCEDURE P_UPDATE_PHONE(PK_CODE INT, PHONE VARCHAR(20))
BEGIN
    IF EXISTS (SELECT USER_PK FROM TB_USER WHERE USER_PK = PK_CODE)
    THEN
        UPDATE TB_USER SET USER_CELL_PHONE = PHONE WHERE USER_PK = PK_CODE;
    END IF;
END
//

--
-- @brief Updates the wallet of the user
--
DELIMITER //
CREATE  PROCEDURE P_UPDATE_WALLET(PK_CODE INT, VALUE DOUBLE)
BEGIN
    IF EXISTS (SELECT USER_PK FROM TB_USER WHERE USER_PK = PK_CODE)
    THEN
        UPDATE TB_USER SET USER_WALLET = VALUE WHERE USER_PK = PK_CODE;
    END IF;
END
//
